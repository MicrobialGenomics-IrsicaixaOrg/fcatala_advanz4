---
title: "02 - Alpha Diversity Analysis"
editor_options: 
  chunk_output_type: console
---

## Define the input and output paths

```{r}
# input
tse_file <- here::here("data", "processed", "tse_cleaned.rds")
igc_file <- here::here("data", "raw", "dataTable.rds")

# output
out_dir <- here::here("data", "02_alpha_diversity")
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)

# confounders 
confounders <- c(
  "treatment",
  "time_point",
  "gender",
  "risk_group",
  "record_id",
  "age", 
  "HIV_VL"
)

# formula
mod_formula <- glue::glue(
  "log_ratio ~ treatment * time_point + gender + scale(age) + risk_group + ", 
  "log1p(HIV_VL) + (1|record_id)"
)
```

## Set-up

```{r}
# load libraries
library(magrittr)
library(patchwork)
library(tidyplots)
suppressPackageStartupMessages(library(tidySingleCellExperiment))
```

## Computate Alpha Diversity Metrics

### Load TreeSE

```{r}
# load
tse <- readr::read_rds(tse_file)
```

### Add Gene Richness

```{r}
# load
igc_df <- readr::read_rds(igc_file) %>% tibble::as_tibble()

# threshold
threshold <- 
  igc_df %>%
  dplyr::group_by(SampleID) %>% 
  dplyr::summarise(NumberMappedReads = max(NumberMappedReads)) %>% 
  dplyr::summarise(q = quantile(NumberMappedReads, 0.02)) %>%
  dplyr::pull()
  
# extract
igc_df <- 
  igc_df %>% 
  dplyr::filter(ReadCountReal >= threshold) %>% 
  dplyr::group_by(SampleID) %>%
  dplyr::summarise(gene_richness = min(GeneNumber))

# merge
tse <- tse %>% dplyr::left_join(igc_df, by = "SampleID")

# transform
tse <- mia::transformAssay(tse, method = "relab")


```

### Compute Alpha Diversity Metrics

```{r}
# select metrics
metrics <- c(
  "shannon_diversity", "gini_dominance","observed_richness", "pielou_evenness"
)

# compute
tse <-
  tse %>%
  mia::addAlpha(
    index = metrics,
    sample = quantile(colSums(assay(tse, "counts")), 0.02),
    niter = 10,
    BPPARAM = BiocParallel::MulticoreParam()
  )
```

## Plot Alpha Diversity Metrics

### Using wilcox.test

Although is not appropriate for longitudinal data, because there is no independence between samples, we can use it to get a first idea of the differences between treatments.

```{r}
#| message: FALSE
#| warning: FALSE
plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map( ~ {
    # prepare data
    plt_df <- colData(tse) %>% tibble::as_tibble() 
     
    # calculate stats
    stats_2 <-
      plt_df %>%
      rstatix::group_by(treatment) %>%
      rstatix::wilcox_test(
        formula = formula(glue::glue("{.x} ~ time_point")),
        p.adjust.method = "fdr"
      ) %>%
      rstatix::add_significance() %>%
      rstatix::add_xy_position(x = "time_point", group = "treatment") %>% 
      dplyr::mutate(y.position = y.position)
      
    # plot
    plt <- 
      plt_df %>% 
      tidyr::drop_na(!!dplyr::sym(.x)) %>% 
      tidyplots::tidyplot(x = time_point, y = !!dplyr::sym(.x), colour = treatment) %>% 
      tidyplots::add_boxplot(show_outliers = FALSE) %>%
      tidyplots::add_data_points_jitter(alpha = 0.4) %>%
      tidyplots::add_test_asterisks(
        method = "wilcox_test", hide_info = TRUE, bracket.nudge.y = 0.05, tip.length = 0.01
      ) %>%
      tidyplots::add(ggpubr::stat_pvalue_manual(
        stats_2, label = "p.adj.signif", hide.ns = TRUE, tip.length = 0.01,
      )) %>% 
      tidyplots::adjust_x_axis_title("Time Point (weeks)") %>%
      tidyplots::adjust_legend_title("Treatment") %>%
      tidyplots::adjust_y_axis_title(
        .x %>% stringr::str_replace_all("_", " ") %>% stringr::str_to_title()
      ) %>% 
      tidyplots::adjust_colors(tidyplots::colors_discrete_friendly) 
      
    if (.x == "gene_richness") {
      plt <- plt %>% tidyplots::adjust_y_axis(labels = scales::scientific)
    }
    
    # save
    plt %>%
      tidyplots::adjust_size(width = 40, height = 40, unit = "mm") %>%
      tidyplots::save_plot(
        here::here(out_dir, glue::glue("alpha_{.x}.pdf")),
        view_plot = FALSE
      )
    
    plt
  })
```

::: {.panel-tabset}

```{r}
#| results: asis
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(plt_list[[.x]])
    cat("\n\n")
  })
```

:::

### Using Linear Mixed Models

```{r}
#| message: FALSE
#| warning: FALSE
plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map( ~ {
    .metric <- rlang::sym(.x)
   
    # prepare data
    plt_df <- 
      colData(tse) %>% 
      tibble::as_tibble() %>%
      dplyr::select(dplyr::all_of(c(confounders, .x))) %>% 
      dplyr::arrange(record_id, time_point) %>% 
      dplyr::group_by(record_id) %>% 
      tidyr::drop_na(dplyr::all_of(.metric)) %>%
      dplyr::mutate(
        dplyr::across(dplyr::where(is.character), as.factor),
        treatment = factor(treatment, levels = c("DRV/r", "DTG")),
        tp = as.character(time_point) %>% as.numeric(),
        ratio = .data[[.x]] / .data[[.x]][tp == min(tp)][1],
        log_ratio = log2(ratio)
      ) %>% 
      dplyr::ungroup() 

    # lmm 
    lmm_res <- 
      stats::as.formula(mod_formula) %>% 
      lmerTest::lmer(data = plt_df) 
    
    # emmeans longitudinal
    emm <- lmm_res %>% emmeans::emmeans(~ time_point | treatment)
    lon_emm_df <- emm %>% broom.mixed::tidy(conf.int = TRUE)
    lon_contrast_df <- 
      emm %>% 
      emmeans::contrast(method = "revpairwise", adjust = "fdr") %>% 
      broom.mixed::tidy(conf.int = TRUE)
    
    # emmeand by group
    emm <- lmm_res %>% emmeans::emmeans(~ treatment | time_point)
    group_emm_df <- emm %>% broom.mixed::tidy(conf.int = TRUE)
    group_contrast_df <- 
      emm %>% 
      emmeans::contrast(method = "revpairwise", adjust = "fdr") %>% 
      broom.mixed::tidy(conf.int = TRUE) %>% 
      dplyr::mutate(p.adj.global = p.adjust(p.value, method = "fdr"))
      
    # forest plot longitudinal
    forest_plt_longitudinal <- 
      lon_contrast_df %>%
      rstatix::add_significance(p.col = "adj.p.value") %>%
      dplyr::mutate(
        contrast_clean = stringr::str_remove_all(contrast, "time_point"),
        t1 = as.numeric(stringr::str_extract(contrast_clean, "^[0-9]+")),
        t2 = as.numeric(stringr::str_extract(contrast_clean, "(?<=- )[0-9]+")),
        treatment = factor(treatment, levels = c("DRV/r", "DTG"))
      ) %>%
      dplyr::arrange(t2, t1) %>%
      dplyr::mutate(contrast = factor(contrast_clean, levels = unique(contrast_clean))) %>% 
      tidyplots::tidyplot(x = estimate, y = contrast, colour = treatment) %>%
      tidyplots::add(geom_pointrange(
        aes(xmin = conf.low, xmax = conf.high),
        alpha = 0.8, 
        position = position_dodge(width = 0.6),
        size = 2/ggplot2::.pt
      )) %>% 
      tidyplots::add_reference_lines(x = 0) %>% 
      tidyplots::add(geom_text(
        aes(
          x = conf.high * 1.2,
          label = dplyr::if_else(adj.p.value.signif != "ns", adj.p.value.signif, "")
        ),
        position = position_dodge(width = 0.6),
        size = 7,
        hjust = 0, 
        colour = "black"
      )) %>% 
      tidyplots::add(expand_limits(x = max(lon_contrast_df$conf.high, na.rm = TRUE) * 1.25)) %>% 
      tidyplots::adjust_x_axis_title("Δ log2(ratio) (later − earlier time point)") %>%
      tidyplots::adjust_y_axis_title("Comparison of time points") %>%
      tidyplots::adjust_legend_title("Treatment") %>% 
      tidyplots::remove_legend()
    
    # forest plot by group
    forest_plt_group <- 
      group_contrast_df %>%
      rstatix::add_significance(p.col = "p.adj.global") %>%
      tidyplots::tidyplot(x = estimate, y = time_point) %>%
      tidyplots::add(geom_pointrange(
        aes(xmin = conf.low, xmax = conf.high),
        alpha = 0.8, 
        position = position_dodge(width = 0.6),
        size = 2/ggplot2::.pt, 
        colour = "#252525"
      )) %>% 
      tidyplots::add_reference_lines(x = 0) %>% 
      tidyplots::add(geom_text(
        aes(
          x = conf.high * 1.2,
          label = dplyr::if_else(p.adj.global.signif != "ns", p.adj.global.signif, "")
        ),
        position = position_dodge(width = 0.6),
        size = 7,
        hjust = 0, 
        colour = "black"
      )) %>% 
      tidyplots::add(expand_limits(x = max(group_contrast_df$conf.high, na.rm = TRUE) * 1.25)) %>% 
      tidyplots::adjust_x_axis_title("Δ log2 ratio (DTG - DRV/r)") %>%
      tidyplots::adjust_y_axis_title("Time point (weeks)") 
    
    # Trajectory plot
    traj_plt <- 
      lon_emm_df %>%
      dplyr::mutate(
        time_point = as.numeric(as.character(time_point)),
        treatment = factor(treatment, levels = c("DRV/r", "DTG"))
      ) %>%
      tidyplots::tidyplot(x = time_point, y = estimate, colour = treatment, group = treatment) %>%
      tidyplots::add(geom_pointrange(
        aes(y = estimate, ymin = conf.low, ymax = conf.high),
        alpha = 0.8, 
        position = position_dodge(width = 50/ggplot2::.pt),
        size = 2 / ggplot2::.pt
      )) %>% 
      tidyplots::add_line() %>% 
      tidyplots::add_reference_lines(y = 0) %>% 
      tidyplots::adjust_x_axis_title("Time Point (weeks)") %>%
      tidyplots::adjust_y_axis_title("Estimated Change in Log2 Ratio") %>%
      tidyplots::adjust_legend_title("Treatment") 
    
    # plt list
    plt_list <- list(
      traj_plt = traj_plt,
      forest_plt_longitudinal = forest_plt_longitudinal,
      forest_plt_group = forest_plt_group
    )
      
    # save
    showtext::showtext_auto()
    names(plt_list) %>% 
      purrr::walk(~ {
        plt_list[[.x]] %>%
          tidyplots::adjust_size(width = 40, height = 40, unit = "mm") %>%
          tidyplots::save_plot(
            here::here(out_dir, glue::glue("{.x}_{.metric}.pdf")),
            view_plot = FALSE
          )
      })
    
    f_plt <- wrap_plots(plt_list) + plot_layout(guides = "collect")
  })
```

::: {.panel-tabset}

```{r}
#| results: asis
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(plt_list[[.x]])
    cat("\n\n")
  })
```

:::

> Observed richness increased significantly over time in the DTG arm, while Shannon diversity showed a similar but non-significant trend. In line with this, dominance decreased over time in the DTG arm, whereas in the DRV/r arm dominance was significantly higher at week 96, indicating that communities remained skewed toward a few highly abundant taxa.

> The increase in observed richness under DTG treatment suggests acquisition of additional taxa. Although Shannon diversity only showed a non-significant increasing trend, the concurrent decrease in dominance indicates that communities tended to become less skewed toward a few highly abundant species. In contrast, participants in the DRV/r arm exhibited significantly higher dominance at week 96, consistent with a community structure where a small number of taxa remained disproportionately abundant. These findings suggest that DTG may promote a more balanced microbial community structure over time, whereas DRV/r is associated with increasing dominance

> Observed richness was consistently higher in the DTG arm at weeks 24, 48, and 96, with estimated differences of ~0.2–0.23 log2 ratio (≈15–18% increase) compared to DRV/r. While nominal p-values indicated significance at all three time points, these associations did not remain significant after global FDR adjustment (adjusted p ≈ 0.066).


## Compute Correlations  

### Define Cytokines and Markers

```{r}
populations <- c("CD4", "CD8", "CD4_CD38_DR", "CD8_CD38_DR")
cytokines <- c("CRP", "IL6", "TNFa", "sCD14")
others <- c("HIV_VL", "BMI")

all_markers <- c(populations, cytokines, others)

# Log2 Transformation
tse2 <- tse %>% dplyr::mutate(dplyr::across(dplyr::all_of(all_markers), ~ log2(.x + 1)))
```

### Compute Sperman Correlations

```{r}
#| warning: FALSE
sparman_corr_df <-
  mia::getCrossAssociation(
    tse2,
    tse2,
    col.var1 = c(metrics, "gene_richness"),
    col.var2 = all_markers,
    method = "spearman",
    p_adj_method = "fdr",
    test.signif = TRUE,
    verbose = FALSE,
    show_warnings = FALSE
  )

# prepare data
plt_df <- 
  sparman_corr_df %>% 
   dplyr::mutate(
    sign = dplyr::case_when(
      p_adj < 0.05 & abs(cor) > 0.2 ~ "< 0.05",
      dplyr::between(p_adj, 0.05, 0.1) & abs(cor) > 0.2 ~ "< 0.1",
      TRUE ~ "ns"
    )
  )

# plot
lim <- abs(plt_df$cor) %>% max() %>% round(digits = 1) * 1.05
plt <-
  plt_df %>%
  dplyr::mutate(lab = stringr::str_replace(Var1, "_", " ") %>% stringr::str_to_sentence()) %>% 
  ggplot(aes(x = Var2, y = lab, fill = cor, colour = sign)) +
  geom_point(aes(size = abs(cor), alpha = sign), shape = 22, stroke = 1) +
  scale_fill_gradientn(
    colours = rev(RColorBrewer::brewer.pal(11, "PiYG")),
    limits = c(-lim, lim)
  ) +
  scale_colour_manual(values = c("< 0.05" = "black", "< 0.1" = "#525252", "ns" = "white")) +
  scale_alpha_manual(values = c("< 0.05" = 0.9, "< 0.1" = 0.9, "ns" = 0.6), guide = "none") +
  scale_size_continuous(range = c(2, 8), guide = "none") +
  theme_minimal() +
  labs(
    x = "", y = "", fill = "Spearman Correlation", colour = "q < 0.05"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top",
    legend.title.position = "top",
    legend.title = element_text(hjust = 0.5),
    legend.key.height = unit(0.5, "cm"),
  )

# Resize and save
r_plt <-
  plt + plot_spacer() +
  plot_layout(
    widths = ggplot2::unit(c(75, 1), "mm"),
    heights = ggplot2::unit(40, "mm")
  )

tidyplots::save_plot(
  r_plt,
  here::here(out_dir, glue::glue("all_sparman_correlation.pdf")),
  view_plot = FALSE
)

r_plt
```

### Compute Repeated Measures Correlation Coefficient

```{r}
#| warning: FALSE

# computes correlations
rmcorr_df_all <- 
  tidyr::expand_grid(metric = c(metrics, "gene_richness"), all_markers) %>%
  purrr::pmap_dfr( ~ {
    # prepare data
    f_df <-
      colData(tse2) %>%
      tibble::as_tibble() %>%
      dplyr::select(dplyr::all_of(c(.x, .y, confounders))) %>%
      tidyr::drop_na(dplyr::all_of(c(.x, .y))) %>%
      dplyr::mutate(
        dplyr::across(dplyr::where(is.character), as.factor),
        treatment = factor(treatment, levels = c("DRV/r", "DTG"))
      )
    
    # compute rmcorr
    res <- rmcorr::rmcorr(
      participant = "record_id",
      measure1 = f_df[[.x]],
      measure2 = f_df[[.y]],
      dataset = f_df
    )
    
    # create tibble 
    tibble::tibble(
      metric = .x,
      marker = .y,
      cor = res$r,
      p = res$p,
      df = list(f_df),
      rmcorr = list(res),
    )
  }) %>% 
  dplyr::mutate(p_adj = p.adjust(p, method = "fdr"), .after = p) %>%
  dplyr::arrange(p_adj)

# prepare data
plt_df <-
  rmcorr_df_all %>%
  dplyr::mutate(
    sign = dplyr::case_when(
      p_adj < 0.05 & abs(cor) > 0.2 ~ "< 0.05",
      dplyr::between(p_adj, 0.05, 0.1) & abs(cor) > 0.2 ~ "< 0.1",
      TRUE ~ "ns"
    ), 
    marker = factor(marker, levels = all_markers),
  )

# plot
lim <- abs(plt_df$cor) %>% max() %>% round(digits = 1) * 1.05
plt <-
  plt_df %>%
  dplyr::mutate(lab = stringr::str_replace(metric, "_", " ") %>% stringr::str_to_sentence()) %>% 
  ggplot(aes(x = marker, y = lab, fill = cor, colour = sign)) +
  geom_point(aes(size = abs(cor), alpha = sign), shape = 22, stroke = 1) +
  scale_fill_gradientn(
    colours = rev(RColorBrewer::brewer.pal(11, "PiYG")),
    limits = c(-lim, lim)
  ) +
  scale_colour_manual(values = c("< 0.05" = "black", "< 0.1" = "#525252", "ns" = "white")) +
  scale_alpha_manual(values = c("< 0.05" = 0.9, "< 0.1" = 0.9, "ns" = 0.6), guide = "none") +
  scale_size_continuous(range = c(2, 8), guide = "none") +
  theme_minimal() +
  labs(
    x = "", y = "", fill = "Repeated Measures Correlation", colour = "q < 0.05"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top",
    legend.title.position = "top",
    legend.title = element_text(hjust = 0.5),
    legend.key.height = unit(0.5, "cm"),
  )

# Resize and save
r_plt <-
  plt + plot_spacer() +
  plot_layout(
    widths = ggplot2::unit(c(75, 1), "mm"),
    heights = ggplot2::unit(40, "mm")
  )

tidyplots::save_plot(
  r_plt,
  here::here(out_dir, glue::glue("all_rm_correlation.pdf")),
  view_plot = FALSE
)

r_plt
```

## Compute Correlations by Treatment Group

### Compute Spearman Correlations

```{r}
#| warning: FALSE
spearman_corr_df <-
  mia::splitOn(tse2, "treatment") %>%
  purrr::map_dfr(~ {
    mia::getCrossAssociation(
      .x,
      .x,
      col.var1 = c(metrics, "gene_richness"),
      col.var2 = all_markers,
      method = "spearman",
      p_adj_method = "fdr",
      test.signif = TRUE, 
      verbose = FALSE, 
      show_warnings = FALSE
    ) %>%
      dplyr::mutate(treatment = unique(.x$treatment))
  })

plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map(~ {
    # prepare data
    plt_df <-
      spearman_corr_df %>%
      dplyr::filter(Var1 == .x) %>%
      dplyr::mutate(
        sign = dplyr::case_when(
          p_adj < 0.05 & abs(cor) > 0.2 ~ "< 0.05",
          dplyr::between(p_adj, 0.05, 0.1) & abs(cor) > 0.2 ~ "< 0.1",
          TRUE ~ "ns"
        )
      )
      
    # plot
    .name <- stringr::str_replace(.x, "_", " ") %>% stringr::str_to_title()
    lim <- abs(plt_df$cor) %>% max() %>% round(digits = 1)
    plt <- 
      plt_df %>% 
      ggplot(aes(x = Var2, y = treatment, fill = cor, colour = sign)) +
      geom_point(aes(size = abs(cor), alpha = sign), shape = 22, stroke = 1) +
      scale_fill_gradientn(
        colours = rev(RColorBrewer::brewer.pal(11, "PiYG")),
        limits = c(-lim, lim)
      ) +
      scale_colour_manual(values = c("< 0.05" = "black", "< 0.1" = "#525252", "ns" = "white")) +
      scale_alpha_manual(values = c("< 0.05" = 0.9, "< 0.1" = 0.9, "ns" = 0.6), guide = "none") +
      scale_size_continuous(range = c(2, 8), guide = "none") +
      theme_minimal() +
      labs(
        x = "",
        y = "Treatment", 
        fill = glue::glue("Spearman Correlation\n(Mark. vs. {.name})"), 
        colour = "q < 0.05"
      ) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1), 
        legend.position = "top", 
        legend.title.position = "top", 
        legend.title = element_text(hjust = 0.5), 
        legend.key.height = unit(0.5, "cm"),
      ) 
    
    # Resize and save
    plt <- 
      plt + plot_spacer() +
      plot_layout(
        widths = ggplot2::unit(c(70, 1), "mm"), 
        heights = ggplot2::unit(30, "mm")
      ) 
    
    tidyplots::save_plot(
      plt, 
      here::here(out_dir, glue::glue("spearman_correlation_{.x}.pdf")), 
      view_plot = FALSE
    )
    
    plt
  })
```

::: {.panel-tabset}

```{r}
#| results: asis
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(plt_list[[.x]])
    cat("\n\n")
  })
```

:::

### Compute Repeated Measures Correlation Coefficient

```{r}
#| warning: FALSE
rmcorr_df <- 
  mia::splitOn(tse2, "treatment") %>%
  purrr::map_dfr(function(.split) {
    tidyr::expand_grid(metric = c(metrics, "gene_richness"), all_markers) %>%
      purrr::pmap_dfr( ~ {
        # prepare data
        f_df <-
          colData(.split) %>%
          tibble::as_tibble() %>%
          dplyr::select(dplyr::all_of(c(.x, .y, confounders))) %>%
          tidyr::drop_na(dplyr::all_of(c(.x, .y))) %>%
          dplyr::mutate(
            dplyr::across(dplyr::where(is.character), as.factor),
            treatment = factor(treatment, levels = c("DRV/r", "DTG"))
          )
        
        # compute rmcorr
        res <- rmcorr::rmcorr(
          participant = "record_id",
          measure1 = f_df[[.x]],
          measure2 = f_df[[.y]],
          dataset = f_df
        )
        
        # create tibble
        tibble::tibble(
          metric = .x,
          marker = .y,
          treatment = unique(.split$treatment),
          cor = res$r,
          p = res$p,
          df = list(f_df),
          rmcorr = list(res),
        )
      })
  }) %>%
  dplyr::mutate(p_adj = p.adjust(p, method = "fdr"), .after = p) %>%
  dplyr::arrange(p_adj)

plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map(~ {
    # prepare data
    plt_df <-
      rmcorr_df %>%
      dplyr::filter(metric == .x) %>%
      dplyr::mutate(
        sign = dplyr::case_when(
          p_adj < 0.05 & abs(cor) > 0.2 ~ "< 0.05",
          dplyr::between(p_adj, 0.05, 0.1) & abs(cor) > 0.2 ~ "< 0.1",
          TRUE ~ "ns"
        ), 
        marker = factor(marker, levels = all_markers)
      )
      
    # plot
    .name <- stringr::str_replace(.x, "_", " ") %>% stringr::str_to_title()
    lim <- abs(plt_df$cor) %>% max() %>% round(digits = 1) * 1.2
    plt <- 
      plt_df %>% 
      ggplot(aes(x = marker, y = treatment, fill = cor, colour = sign)) +
      geom_point(aes(size = abs(cor), alpha = sign), shape = 22, stroke = 1) +
      scale_fill_gradientn(
        colours = rev(RColorBrewer::brewer.pal(11, "PiYG")),
        limits = c(-lim, lim)
      ) +
      scale_colour_manual(values = c("< 0.05" = "black", "< 0.1" = "#525252", "ns" = "white")) +
      scale_alpha_manual(values = c("< 0.05" = 0.9, "< 0.1" = 0.9, "ns" = 0.6), guide = "none") +
      scale_size_continuous(range = c(2, 8), guide = "none") +
      theme_minimal() +
      labs(
        x = "",
        y = "Treatment", 
        fill = glue::glue("Repeated Measures Correlation\n(Marker vs. {.name})"), 
        colour = "q < 0.05"
      ) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1), 
        legend.position = "top", 
        legend.title.position = "top", 
        legend.title = element_text(hjust = 0.5), 
        legend.key.height = unit(0.5, "cm"),
      ) 
    
    # Resize and save
    plt <- 
      plt + plot_spacer() +
      plot_layout(
        widths = ggplot2::unit(c(70, 1), "mm"), 
        heights = ggplot2::unit(30, "mm")
      ) 
    
    tidyplots::save_plot(
      plt, 
      here::here(out_dir, glue::glue("rm_correlation_{.x}.pdf")), 
      view_plot = FALSE
    )
    
    plt
  })
```


::: {.panel-tabset}

```{r}
#| results: asis
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(plt_list[[.x]])
    cat("\n\n")
  })
```

:::

## Scatter Correlations

### Spearman Correlations - Global

```{r}
#| message: FALSE
#| warning: FALSE
dir.create(here::here(out_dir, "spearman_scat"), showWarnings = FALSE, recursive = TRUE)
plt_df <- colData(tse2) %>% tibble::as_tibble()
plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map(function(.metric) {
   all_markers %>% 
      purrr::set_names() %>% 
      purrr::map(function(.marker) {
        # prepare data
        marker_values <- plt_df[[.marker]] %>% .[is.finite(.)]
        lab_min <- min(marker_values, na.rm = TRUE)
        lab_max <- max(marker_values, na.rm = TRUE)
        lab_range <- lab_max - lab_min
        
        .name <- stringr::str_replace(.metric, "_", " ") %>% stringr::str_to_title()
        .y_lab <- glue::glue("Log2  {.marker}")
        
        plt <- 
          plt_df %>%
          tidyr::drop_na(!!.metric, !!.marker) %>%
          tidyplots::tidyplot(
            x = !!dplyr::sym(.metric),
            y = !!dplyr::sym(.marker),
          ) %>%
          tidyplots::add_data_points(alpha = 0.5) %>%
          tidyplots::add(geom_smooth(method = "lm", alpha = 0.1, formula = 'y ~ x')) %>%
          tidyplots::add(ggpubr::stat_cor(
            method = "spearman",
            cor.coef.name = "rho",
            label.y.npc = "bottom",
            p.digits = 1,
            label.y = c(lab_min - 0.05 * lab_range, lab_min - 0.15 * lab_range), 
            size = 3
          )) %>% 
          tidyplots::adjust_legend_title("Treatment") %>%
          tidyplots::adjust_y_axis_title(.y_lab) %>% 
          tidyplots::adjust_x_axis_title(.name) %>% 
          tidyplots::adjust_x_axis(rotate_labels = 30) %>% 
          tidyplots::adjust_colors(tidyplots::colors_discrete_friendly) 
          
          if (.metric == "gene_richness") {
            plt <- plt %>% tidyplots::adjust_x_axis(labels = scales::scientific)
          }
      
          # save
          plt %>%
            tidyplots::adjust_size(width = 50, height = 40, unit = "mm") %>%
            tidyplots::save_plot(
              here::here(
                out_dir, 
                glue::glue("spearman_scat/global_corr_{.metric}_{.marker}.pdf")
              ),
              view_plot = FALSE
            )
          
          plt
      })
  })
```

::: {.panel-tabset}

```{r}
#| results: asis
#| fig.width: 12
#| fig.height: 7
#| warning: FALSE
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(
      plt_list[[.x]] %>% 
        patchwork::wrap_plots() + 
        plot_layout(guides = "collect")
    )
    cat("\n\n")
  })
```

:::

### Spearman Correlations - By Treatment

```{r}
#| message: FALSE
#| warning: FALSE
plt_df <- colData(tse2) %>% tibble::as_tibble()
plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map(function(.metric) {
   all_markers %>% 
      purrr::set_names() %>% 
      purrr::map(function(.marker) {
        # prepare data
        marker_values <- plt_df[[.marker]] %>% .[is.finite(.)]
        lab_min <- min(marker_values, na.rm = TRUE)
        lab_max <- max(marker_values, na.rm = TRUE)
        lab_range <- lab_max - lab_min
        
        .name <- stringr::str_replace(.metric, "_", " ") %>% stringr::str_to_title()
        .y_lab <- glue::glue("Log2  {.marker}")
        
        plt <- 
          plt_df %>%
          tidyr::drop_na(!!.metric, !!.marker) %>%
          tidyplots::tidyplot(
            x = !!dplyr::sym(.metric),
            y = !!dplyr::sym(.marker),
            colour = treatment
          ) %>%
          tidyplots::add_data_points(alpha = 0.5) %>%
          tidyplots::add(geom_smooth(method = "lm", alpha = 0.1, formula = 'y ~ x')) %>%
          tidyplots::add(ggpubr::stat_cor(
            method = "spearman",
            cor.coef.name = "rho",
            label.y.npc = "bottom",
            p.digits = 1,
            label.y = c(lab_min - 0.05 * lab_range, lab_min - 0.15 * lab_range), 
            size = 3
          )) %>% 
          tidyplots::adjust_legend_title("Treatment") %>%
          tidyplots::adjust_y_axis_title(.y_lab) %>% 
          tidyplots::adjust_x_axis_title(.name) %>% 
          tidyplots::adjust_x_axis(rotate_labels = 30) %>% 
          tidyplots::adjust_colors(tidyplots::colors_discrete_friendly) 
          
          if (.metric == "gene_richness") {
            plt <- plt %>% tidyplots::adjust_x_axis(labels = scales::scientific)
          }
      
          # save
          plt %>%
            tidyplots::adjust_size(width = 50, height = 40, unit = "mm") %>%
            tidyplots::save_plot(
              here::here(
                out_dir, 
                glue::glue("spearman_scat/corr_{.metric}_{.marker}.pdf")
              ),
              view_plot = FALSE
            )
          
          plt
      })
  })
```

::: {.panel-tabset}

```{r}
#| results: asis
#| fig.width: 12
#| fig.height: 7
#| warning: FALSE
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(
      plt_list[[.x]] %>% 
        patchwork::wrap_plots() + 
        plot_layout(guides = "collect")
    )
    cat("\n\n")
  })
```

:::

### Repeated Measures Correlation Coefficient - Global

```{r}
#| warning: FALSE
dir.create(here::here(out_dir, "rm_scat"), showWarnings = FALSE, recursive = TRUE)
plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map(function(.metric) {
   all_markers %>% 
      purrr::set_names() %>% 
      purrr::map(function(.marker) {
        it_data <- rmcorr_df_all %>% dplyr::filter(metric == .metric, marker == .marker)
        plt_df <-
          it_data$df %>%
          purrr::list_rbind() %>%
          dplyr::mutate(fitted_vals = it_data$rmcorr[[1]]$model$fitted.values)
        
        .y_lab <- glue::glue("Log2  {.marker}")
        
        plt <- 
          plt_df %>% 
          tidyplots::tidyplot(x = !!rlang::sym(.metric), y = !!rlang::sym(.marker), color = record_id) %>%
          tidyplots::add_data_points(alpha = 0.4) %>%
          tidyplots::add(geom_line(aes(y = fitted_vals, group = record_id), alpha = 0.8)) %>% 
          tidyplots::adjust_x_axis_title(
            .metric %>% stringr::str_replace_all("_", " ") %>% stringr::str_to_title()
          )  %>% 
          tidyplots::adjust_caption(fontsize = 7) %>%
          tidyplots::adjust_y_axis_title(.y_lab) %>% 
          tidyplots::adjust_x_axis(rotate_labels = 30) %>% 
          tidyplots::adjust_colors(tidyplots::colors_discrete_friendly) %>% 
          tidyplots::remove_legend() %>% 
          tidyplots::add_caption(
            caption = glue::glue(
              "r: {round(it_data$cor, 2)}; ajd. P: {formatC(it_data$p_adj,
               format = 'e', digits = 2)}; n = {nrow(plt_df)}"
            )
          )
    
        if (.metric == "gene_richness") {
          plt <- plt %>% tidyplots::adjust_x_axis(labels = scales::scientific)
        }
    
        # save
        plt %>%
          tidyplots::adjust_size(width = 50, height = 40, unit = "mm") %>%
          tidyplots::save_plot(
            here::here(
              out_dir, 
              glue::glue("rm_scat/global_corr_{.metric}_{.marker}.pdf")
            ),
            view_plot = FALSE
          )
        plt
      })
  })
```

::: {.panel-tabset}

```{r}
#| results: asis
#| fig.width: 12
#| fig.height: 7
#| warning: FALSE
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(
      plt_list[[.x]] %>% 
        patchwork::wrap_plots() + 
        plot_layout(guides = "collect")
    )
    cat("\n\n")
  })
```

:::

### Repeated Measures Correlation Coefficient - by Treatment

```{r}
#| warning: FALSE
dir.create(here::here(out_dir, "rm_scat"), showWarnings = FALSE, recursive = TRUE)
plt_list <- 
  c(metrics, "gene_richness") %>% 
  purrr::set_names() %>% 
  purrr::map(function(.metric) {
   all_markers %>% 
      purrr::set_names() %>% 
      purrr::map(function(.marker) {
        it_data <- rmcorr_df %>% dplyr::filter(metric == .metric, marker == .marker)
        plt_df <-
          it_data$df %>%
          purrr::list_rbind() %>%
          dplyr::mutate(
            fitted_vals = c(
              it_data$rmcorr[[1]]$model$fitted.values,
              it_data$rmcorr[[2]]$model$fitted.values
            )
          )
        
        .y_lab <- glue::glue("Log2  {.marker}")
        plt <- 
          plt_df %>% 
          tidyplots::tidyplot(x = !!rlang::sym(.metric), y = !!rlang::sym(.marker), color = treatment) %>%
          tidyplots::add_data_points(alpha = 0.4) %>%
          tidyplots::add(geom_line(aes(y = fitted_vals, group = record_id), alpha = 0.8)) %>% 
          tidyplots::adjust_x_axis_title(
            .metric %>% stringr::str_replace_all("_", " ") %>% stringr::str_to_title()
          )  %>% 
          tidyplots::adjust_caption(fontsize = 7) %>%
          tidyplots::adjust_y_axis_title(.y_lab) %>% 
          tidyplots::adjust_x_axis(rotate_labels = 30) %>% 
          tidyplots::adjust_colors(tidyplots::colors_discrete_friendly) %>% 
          tidyplots::remove_legend() %>% 
          tidyplots::add_caption(
            caption = glue::glue(
              "r: {round(it_data$cor, 2)}; ajd. P: {formatC(it_data$p_adj,
               format = 'e', digits = 2)}; n = {nrow(plt_df)}"
            )
          )
    
        if (.metric == "gene_richness") {
          plt <- plt %>% tidyplots::adjust_x_axis(labels = scales::scientific)
        }
    
        # save
        plt %>%
          tidyplots::adjust_size(width = 50, height = 40, unit = "mm") %>%
          tidyplots::save_plot(
            here::here(
              out_dir, 
              glue::glue("rm_scat/corr_{.metric}_{.marker}.pdf")
            ),
            view_plot = FALSE
          )
        plt
      })
  })
```

::: {.panel-tabset}

```{r}
#| results: asis
#| fig.width: 12
#| fig.height: 7
#| warning: FALSE
names(plt_list) %>% 
  purrr::walk(~ {
    cat("#### ", .x, "\n")
    plot(
      plt_list[[.x]] %>% 
        patchwork::wrap_plots() + 
        plot_layout(guides = "collect")
    )
    cat("\n\n")
  })
```

:::

## Export TSE with Alpha Metrics

```{r}
tse %>% readr::write_rds(here::here("data", "processed", "tse_alpha.rds"))
```

## Appendix

### Session Info

```{r}
devtools::session_info()
```

### Contact

- **Analysis Lead:** Francesc Català-Moll
- **Email:** fcatala@irsicaixa.es
- **Institution:** GEM - IrsiCaixa
